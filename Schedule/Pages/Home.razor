@page "/"
@using Schedule.Application.Wrappers
@using Schedule.Components
@using Schedule.Domain
@using Schedule.Domain.DisplayObjects
@using Schedule.Domain.DisplayObjects.Group
@inject SnackbarWrappers SnackbarWrapper

<SearchBar Icon="@Icons.Material.Filled.Search" Placeholder="Search..." AutoFocus="true" @bind-Value="_searchTerm"/>

<MudGrid>
    @if (!_dataLoaded)
    {
        for (var i = 0; i < 20; i++)
        {
            <GroupCardSkeleton/>
        }
    }
    else
    {
        ICollection<GroupDisplayObject> groups = GetGroups().ToList();

        if (groups.Count == 0)
        {
            <GroupCardSkeleton/>
        }
        else
        {
            @foreach (var groupNode in groups)
            {
                <PaperGroupCard Group="groupNode" OnFavoriteChange="@StateHasChanged"/>
            }
        }
    }
</MudGrid>

<MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Dark" Label="Refresh"
        ButtonType="ButtonType.Button" Class="fixed z-10" Style="bottom: 12px; right: 0;"
        OnClick="() => SnackbarWrapper.WrapOnErrorAsync(LoadMainPageContent)"/>


@code {

    private IEnumerable<GroupDisplayObject> GetGroups()
    {
        IEnumerable<GroupDisplayObject> groups = _groups.Where(
            g =>
                string.IsNullOrWhiteSpace(_searchTerm)
                || g.Name.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)
        );

        return groups.OrderByDescending(g => g.Favourite).ThenBy(g => g.Name);
    }

}